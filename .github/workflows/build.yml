name: Auto build php:fpm-alpine with custom extensions

on:
  workflow_dispatch:
  schedule:
    - cron: '0 19 * * 0'
  push:
    branches:
      - 'main'

jobs:
  auto_build_php:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Docker Setup Buildx
        uses: docker/setup-buildx-action@v3
      - name: Docker Login
        uses: docker/login-action@v3 
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Generate date tag
        run: echo "DATE=$(date +%Y%m%d)" >> $GITHUB_ENV
      - name: Build and push Docker images
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64
          push: true
          tags: |
            whosneo/php:latest
            whosneo/php:${{ env.DATE }}
      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq
      - name: Clean up old images
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
        run: |
          ONE_YEAR_AGO=$(date -d "365 days ago" +%Y-%m-%d)
          echo "One year ago: $ONE_YEAR_AGO"
          
          RESPONSE=$(curl -s -w "\n%{http_code}" -H "Authorization: JWT $DOCKERHUB_TOKEN" \
            "https://hub.docker.com/v2/namespaces/$DOCKERHUB_USERNAME/repositories/php/tags?page_size=100")
          
          HTTP_STATUS=$(echo "$RESPONSE" | tail -n1)
          RESPONSE_BODY=$(echo "$RESPONSE" | sed -e '$d')
          
          echo "HTTP Status: $HTTP_STATUS"
          echo "Response Body: $RESPONSE_BODY"
          
          if [ "$HTTP_STATUS" != "200" ]; then
            echo "Error: Failed to fetch tags (HTTP Status: $HTTP_STATUS)"
            exit 1
          fi
          
          if ! echo "$RESPONSE_BODY" | jq -e '.results' >/dev/null 2>&1; then
            echo "Error: No 'results' field in response or invalid JSON"
            exit 1
          fi
          
          tags=$(echo "$RESPONSE_BODY" | jq -r '.results[] | select(.name | test("^[0-9]{8}$")) | .name + "," + .last_updated' 2>/dev/null || echo "")
          
          if [ -z "$tags" ]; then
            echo "No tags found matching YYYYMMDD format or repository is empty."
            exit 0
          fi
          
          while IFS=',' read -r tag last_updated; do
            last_updated_date=$(date -d "$last_updated" +%Y-%m-%d 2>/dev/null || echo "Invalid date")
            if [ "$last_updated_date" = "Invalid date" ]; then
              echo "Skipping tag whosneo/php:$tag (invalid last_updated: $last_updated)"
              continue
            fi
            if [[ "$last_updated_date" < "$ONE_YEAR_AGO" ]]; then
              DELETE_RESPONSE=$(curl -s -w "%{http_code}" -X DELETE -H "Authorization: JWT $DOCKERHUB_TOKEN" \
                "https://hub.docker.com/v2/namespaces/$DOCKERHUB_USERNAME/repositories/php/tags/$tag")
              DELETE_STATUS=$(echo "$DELETE_RESPONSE" | tail -n1)
              if [ "$DELETE_STATUS" = "204" ]; then
                echo "Deleted tag whosneo/php:$tag (last updated: $last_updated_date)"
              else
                echo "Failed to delete tag whosneo/php:$tag (HTTP Status: $DELETE_STATUS)"
              fi
            else
              echo "Keeping tag whosneo/php:$tag (last updated: $last_updated_date)"
            fi
          done <<< "$tags"
